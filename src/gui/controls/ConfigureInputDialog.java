/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.controls;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JRadioButton;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author SHRI
 */
public class ConfigureInputDialog extends javax.swing.JDialog {

    private ControlsToobar controlsToobar;

    /**
     * Creates new form ConfigureInputDialog
     */
    public ConfigureInputDialog(java.awt.Frame parent, boolean modal, ControlsToobar controlsToobar) {
        super(parent, modal);
        initComponents();
        this.controlsToobar = controlsToobar;

        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                super.windowClosed(e); //To change body of generated methods, choose Tools | Templates.
              //  onDefaultClose();
            }
        });
    }

    private void onDefaultClose() {
        controlsToobar.generateScenarioActionPerformed();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        radioButtonGroup = new javax.swing.ButtonGroup();
        ConfigureInputPanel = new javax.swing.JPanel();
        memebrNodesLabel = new javax.swing.JLabel();
        enteringNodesLabel = new javax.swing.JLabel();
        inputNodesCountSpinner = new javax.swing.JSpinner();
        externalNodeCountSpinner = new javax.swing.JSpinner();
        evaluatePerformanceCheckBox = new javax.swing.JCheckBox();
        meanOffsetScenarioRadioButton = new javax.swing.JRadioButton();
        attackScenarioRadioButton = new javax.swing.JRadioButton();
        meanOffsetValueLabel = new javax.swing.JLabel();
        meanOffsetValueComboBox = new javax.swing.JComboBox();
        percentDishonestRALabel = new javax.swing.JLabel();
        percentDishonestRASpinner = new javax.swing.JSpinner();
        closeInputDialogButton = new javax.swing.JButton();
        selectAttackLabel = new javax.swing.JLabel();
        selectAttackComboBox = new javax.swing.JComboBox();
        keepStaticRecommendationsCheckBox = new javax.swing.JCheckBox();

        radioButtonGroup.add(meanOffsetScenarioRadioButton);
        radioButtonGroup.add(attackScenarioRadioButton);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Configure Input");
        setAutoRequestFocus(false);
        setFocusableWindowState(false);
        getContentPane().setLayout(null);

        ConfigureInputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Configure", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(102, 102, 255)));
        ConfigureInputPanel.setLayout(null);

        memebrNodesLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        memebrNodesLabel.setText("Member Nodes:");
        ConfigureInputPanel.add(memebrNodesLabel);
        memebrNodesLabel.setBounds(20, 30, 90, 20);

        enteringNodesLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        enteringNodesLabel.setText("Entering Nodes:");
        ConfigureInputPanel.add(enteringNodesLabel);
        enteringNodesLabel.setBounds(220, 30, 100, 20);

        inputNodesCountSpinner.setModel(new SpinnerNumberModel(10,10,100,5));
        ConfigureInputPanel.add(inputNodesCountSpinner);
        inputNodesCountSpinner.setBounds(120, 30, 60, 20);

        externalNodeCountSpinner.setEditor(new javax.swing.JSpinner.NumberEditor(externalNodeCountSpinner, ""));
        externalNodeCountSpinner.setValue(1);
        ConfigureInputPanel.add(externalNodeCountSpinner);
        externalNodeCountSpinner.setBounds(330, 30, 60, 20);

        evaluatePerformanceCheckBox.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        evaluatePerformanceCheckBox.setText("Evaluate Performance");
        evaluatePerformanceCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evaluatePerformanceCheckBoxActionPerformed(evt);
            }
        });
        ConfigureInputPanel.add(evaluatePerformanceCheckBox);
        evaluatePerformanceCheckBox.setBounds(20, 80, 150, 23);

        meanOffsetScenarioRadioButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        meanOffsetScenarioRadioButton.setSelected(true);
        meanOffsetScenarioRadioButton.setText("Mean Offset (MO) Scenario");
        ConfigureInputPanel.add(meanOffsetScenarioRadioButton);
        meanOffsetScenarioRadioButton.setBounds(20, 120, 190, 23);

        attackScenarioRadioButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        attackScenarioRadioButton.setText("Attack Scenario");
        ConfigureInputPanel.add(attackScenarioRadioButton);
        attackScenarioRadioButton.setBounds(20, 150, 150, 20);

        meanOffsetValueLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        meanOffsetValueLabel.setText("Mean Offset Value: ");
        ConfigureInputPanel.add(meanOffsetValueLabel);
        meanOffsetValueLabel.setBounds(20, 220, 120, 20);

        meanOffsetValueComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0.1", "0.2", "0.4", "0.6", "0.8" }));
        ConfigureInputPanel.add(meanOffsetValueComboBox);
        meanOffsetValueComboBox.setBounds(140, 220, 70, 20);

        percentDishonestRALabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        percentDishonestRALabel.setText("% Dishonest RA:");
        ConfigureInputPanel.add(percentDishonestRALabel);
        percentDishonestRALabel.setBounds(220, 220, 120, 20);

        percentDishonestRASpinner.setModel(new SpinnerNumberModel(10,10,100,5));
        percentDishonestRASpinner.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ConfigureInputPanel.add(percentDishonestRASpinner);
        percentDishonestRASpinner.setBounds(330, 220, 60, 20);

        closeInputDialogButton.setText("Close");
        closeInputDialogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeInputDialogButtonActionPerformed(evt);
            }
        });
        ConfigureInputPanel.add(closeInputDialogButton);
        closeInputDialogButton.setBounds(170, 390, 140, 23);

        selectAttackLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        selectAttackLabel.setText("Select Attack Type :");
        ConfigureInputPanel.add(selectAttackLabel);
        selectAttackLabel.setBounds(20, 270, 130, 14);

        selectAttackComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Bad Mouthing", "Ballot Stuffing", "Random Opinion" }));
        ConfigureInputPanel.add(selectAttackComboBox);
        selectAttackComboBox.setBounds(140, 270, 190, 20);

        keepStaticRecommendationsCheckBox.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        keepStaticRecommendationsCheckBox.setText("Keep Recommendations Static ");
        keepStaticRecommendationsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keepStaticRecommendationsCheckBoxActionPerformed(evt);
            }
        });
        ConfigureInputPanel.add(keepStaticRecommendationsCheckBox);
        keepStaticRecommendationsCheckBox.setBounds(140, 330, 240, 23);

        getContentPane().add(ConfigureInputPanel);
        ConfigureInputPanel.setBounds(0, 0, 470, 440);

        setSize(new java.awt.Dimension(489, 483));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void evaluatePerformanceCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evaluatePerformanceCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_evaluatePerformanceCheckBoxActionPerformed

    private void closeInputDialogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeInputDialogButtonActionPerformed
        // TODO add your handling code here:
        controlsToobar.generateScenarioActionPerformed();
        setFocusableWindowState(false);
        dispose();
    }//GEN-LAST:event_closeInputDialogButtonActionPerformed

    private void keepStaticRecommendationsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keepStaticRecommendationsCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_keepStaticRecommendationsCheckBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConfigureInputDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConfigureInputDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConfigureInputDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConfigureInputDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ConfigureInputDialog dialog = new ConfigureInputDialog(new javax.swing.JFrame(), true, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    public JSpinner getExternalNodeCountSpinner() {
        return externalNodeCountSpinner;
    }

    public JSpinner getInputNodesCountSpinner() {
        return inputNodesCountSpinner;
    }

    public JRadioButton getAttackScenarioRadioButton() {
        return attackScenarioRadioButton;
    }

    public JCheckBox getEvaluatePerformanceCheckBox() {
        return evaluatePerformanceCheckBox;
    }

    public JRadioButton getMeanOffsetScenarioRadioButton() {
        return meanOffsetScenarioRadioButton;
    }

    public JComboBox getMeanOffsetValueComboBox() {
        return meanOffsetValueComboBox;
    }

    public JSpinner getPercentDishonestRASpinner() {
        return percentDishonestRASpinner;
    }

    public ButtonGroup getRadioButtonGroup() {
        return radioButtonGroup;
    }

    public JComboBox getSelectAttackComboBox() {
        return selectAttackComboBox;
    }

    public JButton getCloseInputDialogButton() {
        return closeInputDialogButton;
    }

    public JLabel getEnteringNodesLabel() {
        return enteringNodesLabel;
    }

    public JLabel getMeanOffsetValueLabel() {
        return meanOffsetValueLabel;
    }

    public JLabel getMemebrNodesLabel() {
        return memebrNodesLabel;
    }

    public JLabel getPercentDishonestRALabel() {
        return percentDishonestRALabel;
    }

    public JLabel getSelectAttackLabel() {
        return selectAttackLabel;
    }

    public JCheckBox getKeepStaticRecommendationsCheckBox() {
        return keepStaticRecommendationsCheckBox;
    }

    public void setKeepStaticRecommendationsCheckBox(JCheckBox keepStaticRecommendationsCheckBox) {
        this.keepStaticRecommendationsCheckBox = keepStaticRecommendationsCheckBox;
    }

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ConfigureInputPanel;
    private javax.swing.JRadioButton attackScenarioRadioButton;
    private javax.swing.JButton closeInputDialogButton;
    private javax.swing.JLabel enteringNodesLabel;
    private javax.swing.JCheckBox evaluatePerformanceCheckBox;
    private javax.swing.JSpinner externalNodeCountSpinner;
    private javax.swing.JSpinner inputNodesCountSpinner;
    private javax.swing.JCheckBox keepStaticRecommendationsCheckBox;
    private javax.swing.JRadioButton meanOffsetScenarioRadioButton;
    private javax.swing.JComboBox meanOffsetValueComboBox;
    private javax.swing.JLabel meanOffsetValueLabel;
    private javax.swing.JLabel memebrNodesLabel;
    private javax.swing.JLabel percentDishonestRALabel;
    private javax.swing.JSpinner percentDishonestRASpinner;
    private javax.swing.ButtonGroup radioButtonGroup;
    private javax.swing.JComboBox selectAttackComboBox;
    private javax.swing.JLabel selectAttackLabel;
    // End of variables declaration//GEN-END:variables
}
