/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.logger;

import apis.IConfiguration;
import gui.scenario.ScenarioPane;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.DefaultCaret;

/**
 *
 * @author SHRI
 */
public class EventLoggerPane extends javax.swing.JPanel implements IConfiguration{

    private StringBuilder eventStringBuilder;
    private EventLoggerFrame eventLoggerFrame;
    private ScenarioPane scenarioPane;
    private BufferedWriter bufferedWriter;
    
    /**
     * Creates new form EventLoggerPane
     */
    public EventLoggerPane(ScenarioPane scenarioPane) {
        initComponents();
        //Initialize Objects
        this.scenarioPane=scenarioPane;
        eventStringBuilder = new StringBuilder();
        /*
        //Open File for Writing Logs
        try {
            bufferedWriter=new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_PATH)));
        } catch (IOException ex) {
            Logger.getLogger(EventLoggerPane.class.getName()).log(Level.SEVERE, null, ex);
        }
        */
        refreshLog();
    }

    public void clearLogs() {
        eventStringBuilder = new StringBuilder();
    }

    private void refreshLog() {
        java.util.Timer timer = new java.util.Timer();
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                logTextArea.setText(eventStringBuilder.toString());              
            }
        }, 0, 100/*Delay*/);
    }

    public void logEvent(String msg) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
     // StringBuilder logFormatStr=new StringBuilder(dateFormat.format(new Date())+": "+msg+"\n");
     // eventStringBuilder.append(logFormatStr);
        eventStringBuilder.append(dateFormat.format(new Date())).append(": ").append(msg).append("\n");
       // System.out.println(eventStringBuilder.toString());
        //Write the log in file
      /*  try {
            bufferedWriter.write(eventStringBuilder.toString());
            bufferedWriter.newLine();
        } catch (IOException ex) {
            Logger.getLogger(EventLoggerPane.class.getName()).log(Level.SEVERE, null, ex);
        }*/
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        clearEventsButton = new javax.swing.JButton();
        closeEventButton = new javax.swing.JButton();
        eventLoggerScrollpane = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Event Logger"));
        setLayout(null);

        clearEventsButton.setText("Clear Events");
        clearEventsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearEventsButtonActionPerformed(evt);
            }
        });
        add(clearEventsButton);
        clearEventsButton.setBounds(320, 170, 170, 23);

        closeEventButton.setText("Close");
        closeEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeEventButtonActionPerformed(evt);
            }
        });
        add(closeEventButton);
        closeEventButton.setBounds(500, 170, 170, 23);

        logTextArea.setEditable(false);
        logTextArea.setColumns(20);
        logTextArea.setFont(new java.awt.Font("Monospaced", 1, 13)); // NOI18N
        logTextArea.setRows(5);
        DefaultCaret caret = (DefaultCaret) logTextArea.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        logTextArea.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                logTextAreaCaretUpdate(evt);
            }
        });
        eventLoggerScrollpane.setViewportView(logTextArea);

        add(eventLoggerScrollpane);
        eventLoggerScrollpane.setBounds(20, 30, 940, 120);
    }// </editor-fold>//GEN-END:initComponents

    private void clearEventsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearEventsButtonActionPerformed
        // TODO add your handling code here:
        clearLogs();
    }//GEN-LAST:event_clearEventsButtonActionPerformed

    private void closeEventButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeEventButtonActionPerformed
        // TODO add your handling code here:
        eventLoggerFrame.dispose();
        setBounds(0, 530, 1290, 200);
        scenarioPane.add(this);
    }//GEN-LAST:event_closeEventButtonActionPerformed

    private void logTextAreaCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_logTextAreaCaretUpdate
        // TODO add your handling code here:
    }//GEN-LAST:event_logTextAreaCaretUpdate
    public void setEventLoggerFrame(EventLoggerFrame eventLoggerFrame) {
        this.eventLoggerFrame = eventLoggerFrame;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearEventsButton;
    private javax.swing.JButton closeEventButton;
    private javax.swing.JScrollPane eventLoggerScrollpane;
    private javax.swing.JTextArea logTextArea;
    // End of variables declaration//GEN-END:variables

}
